{% set name = "streamz" %}
{% set version = "0.6.4" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 5577d6904c2ec489c14154095772105e01954648819987d464204c6e3c9634f3

build:
  number: 0
  skip: True  # [py<39]
  script: {{ PYTHON }} -m pip install . --no-deps --no-build-isolation -vv

requirements:
  host:
    - python
    - pip
    - setuptools
    - wheel
  run:
    - python
    - tornado
    - toolz
    - zict
    - six
    # undocumented, reported by pip check
    - numpy
    - pandas

{% set skip_tests = "" %}
# we are using a too new version of 'distributed' (can't use sufficiently old version due to pinning constraints
# and package availability). skip the affected tests with error: fixture 'loop_in_thread' not found
{% set skip_tests = skip_tests + " --deselect=streamz/tests/test_core.py::test_separate_thread_without_time" %}
{% set skip_tests = skip_tests + " --deselect=streamz/tests/test_core.py::test_await_syntax" %}
{% set skip_tests = skip_tests + " --deselect=streamz/tests/test_dask.py::test_partition_then_scatter_sync" %}
{% set skip_tests = skip_tests + " --deselect=streamz/tests/test_dask.py::test_sync" %}
{% set skip_tests = skip_tests + " --deselect=streamz/tests/test_dask.py::test_sync_2" %}
{% set skip_tests = skip_tests + " --deselect=streamz/tests/test_dask.py::test_buffer_sync" %}

test:
  source_files:
    - streamz
  imports:
    - streamz
    - streamz.core
    - streamz.dataframe
  requires:
    - pip
    - python
    - pytest
    - distributed
    - flaky
    - dask
    - numpy
  commands:
    - pip check
    - python -c "from importlib.metadata import version; assert(version('{{ name }}')=='{{ version }}')"
    - pytest -vv {{ skip_tests }} streamz/tests

about:
  home: https://github.com/python-streamz/streamz
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE.txt
  summary: Real-time stream processing for python
  description: |
    Streamz helps you build pipelines to manage continuous streams of data. 
    It is simple to use in simple cases, but also supports complex pipelines
    that involve branching, joining, flow control, feedback, back pressure, and so on.
    Optionally, Streamz can also work with both Pandas and cuDF dataframes, 
    to provide sensible streaming operations on continuous tabular data.
  doc_url: https://streamz.readthedocs.io
  dev_url: https://github.com/python-streamz/streamz

extra:
  recipe-maintainers:
    - CJ-Wright
    - mrocklin
    - jrmlhermitte
    - mariusvniekerk
    - martindurant
